{
  "name": "warp.oauth2provider",
  "description": "Easy to implement OAuth 2.0 / Redis provider implementation",
  "author": {
    "name": "Chris Beemster"
  },
  "version": "0.0.12",
  "repository": {
    "type": "git",
    "url": "https://github.com/wearereasonablepeople/warp.oauth2provider.git"
  },
  "dependencies": {
    "async": "0.9.0"
  },
  "gitHead": "5c793422780c6a4ae946db31b04ed6c2170eae95",
  "bugs": {
    "url": "https://github.com/wearereasonablepeople/warp.oauth2provider/issues"
  },
  "homepage": "https://github.com/wearereasonablepeople/warp.oauth2provider",
  "_id": "warp.oauth2provider@0.0.12",
  "scripts": {},
  "_shasum": "de191d510198191a97ef1f548bedf8648cb78d13",
  "_from": "warp.oauth2provider@0.0.12",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "wearereasonablepeople",
    "email": "chris@wearereasonablepeople.com"
  },
  "maintainers": [
    {
      "name": "wearereasonablepeople",
      "email": "chris@wearereasonablepeople.com"
    }
  ],
  "readme": "# warp-oauth2provider\n\n## Overview\nwarp-oauth2provider is a simple but secure OAuth2 provider for ExpressJS 4 and Redis. A user can be logged in once per client.\n\nContains an example implementation, where the model is currently a static file, can be easily replaced with a SequelizeJS model (or similar, as long as it is implemented with a getByCredential method for the client and user object).\n\n## Changes\n0.0.3 Business logics and middleware separated.\n0.0.4 Updated documentation\n0.0.5 Updated documentation\n...\n0.0.11 Refactored, better separation between token logics and middleware.\n\n## Implementation\nThe example below is for illustrational purposes only. In real-life applications, store the sessions in Redis (or another session-store).\n\n\tvar express = require('express'),\n\t    redis = require('redis'),\n\t    bodyParser = require('body-parser'),\n\t    session = require('express-session'),\n\t    btoa = require('btoa');\n\tvar app = express();\n\tvar oauth2lib = require('../index'),\n\t    oauth2 = new oauth2lib({\n\t        client: redis.createClient(),\n\t        model: {\n\t            client: require('./models/client.js'),\n\t            user: require('./models/user.js')\n\t        },\n\t        ttl: 600\n\t    });\n\t\n\tapp.use(session({\n\t    secret: 'keyboard cat',\n\t    resave: false,\n\t    saveUninitialized: true\n\t}));\n\tapp.use(bodyParser.urlencoded({ extended: false }));\n\tapp.use(bodyParser.json());\n\tapp.use(oauth2.inject());\n\t\n\tapp.use('/', express.static('./frontend')); // static routes\n\t\n\tapp.get('/secure', oauth2.middleware.isAuthorised, function(req, res) {\n\t    res.json({\n\t        userId: req.userId\n\t    });\n\t});\n\t\n\tapp.get('/insecure', function(req, res) {\n\t    res.json(true);\n\t});\n\t\n\tapp.post('/oauth/token', oauth2.middleware.createToken);\n\t\n\tapp.post('/api/session', function(req, res){\n\t    req.oauth2.token.create(req.oauth2.options, req.body, {\n\t        authorization: 'Basic ' + btoa('3:secret')\n\t    }, function(err, data){\n\t        if (err){\n\t            res.status(err.status).send(err.body);\n\t        }\n\t        req.session.accessToken = data.accessToken;\n\t        return res.json(data);\n\t    });\n\t});\n\t\n\tvar server = app.listen(3000, function () {\n\t    var host = server.address().address;\n\t    var port = server.address().port;\n\t\n\t    console.log('Example app listening at http://%s:%s', host, port);\n\t});\n\nAlso, see the /example folder in the module.\n\n## Usage\n### Create token\nFirst, make a POST to http://localhost:3000/oauth/token, with the following body:\n\n- grant_type: password\n- password: secret\n- scope: all\n- username: john@doe.com\n\n..and the following headers:\n\n- Content-Type: application/x-www-form-urlencoded; charset=utf-8\n- Accept-Language: nl;q=1, en;q=0.9, de;q=0.8\n- Authorization: Basic Mzptb29uc2hvdA==\n- User-Agent: YourAPP/47 (iPhone; iOS 8.1.1; Scale/2.00)\n\nThe Authorization header contains the string \"Basic\" and a base64-encoded string for \"clientId:clientSecret\". For instance \"3:secret\" will become \"MzpzZWNyZXQ=\".\n\nThis will return a JSON object like:\n\n\t{\n\t  \"refreshToken\" : \"a5b0f1433b5ce909698d56e8931008b7da5a58d4d279ee8da7008ee408bb11573d1cc361f7350478fa9a51862341a97ddac73f4f75a13e3e5a9d797224274876\",\n\t  \"accessToken\" : \"471c6cdcb726ee045e72f3b76478f692e8a667b05ced8a33f9ff894b1572d882\"\n\t}\n\nValidate your base64 strings on https://www.base64encode.org/\n\nNow you can access protected endpoints with ?access_token=... or with the token in the Authorization HTTP header.\n\n### Sign in (for web-clients / server-side usage)\nIn order to allow a simple browser username / password sign-in mechanism, implement a method as follows:\n\n\tapp.post('/api/session', function(req, res){\n\t    req.oauth2.token.create(req.oauth2.options, req.body, {\n\t        authorization: 'Basic ' + btoa('3:secret')\n\t    }, function(err, data){\n\t        if (err){\n\t            res.status(err.status).send(err.body);\n\t        }\n\t        req.session.accessToken = data.accessToken;\n\t        return res.json(data);\n\t    });\n\t});\n\nYou'll manually pass the options, body and headers to the OAuth createToken method. The callback method allows you to store the accessToken in a session or cookie and to return whatever you want to your client.\n\n## Limitations\nCurrently only supports username / password authentication.\n\n## Feedback\nContact us on info@wearereasonablepeople.com",
  "readmeFilename": "README.md"
}
